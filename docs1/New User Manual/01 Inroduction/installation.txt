============
Installation
============

.. warning::
	This section requires working with terminal / command prompt. Good news is most of it is copy paste and once you are done with it you won't have to get to command prompt very often.

Python Version
^^^^^^^^^^^^^^^

As the main ingredient of JAM.PY is Python, you need to make sure you have python installed on your device. While there are several useful instructions available on the net, best place to start would be to download Python from https://www.python.org/downloads/ and follow instructions for your operating system.

We recommend using the latest version of Python 3. JAM.PY supports Python 3.5 and newer. It also supports Python 2.7.

:doc:`Python Install on Windows <Python_for_windows>`

Create and Activate Virtual Environment
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

While it is not necessary to use virtual environment to start using JAM.PY,
it is a good practice to use a virtual environment as it helps in managing the 
dependencies for each project and ensures that any changes done in one project 
do not affect other projects or the operating system packages.

``venv`` module comes bundled with Python 3 and we will use this to create virtual environments.

To create the environment, first create a project folder say ``jampytest`` and 
then create a virtual environment within it like so:

.. code-block:: console
  
    $ mkdir jampytest
    $ cd jampytest
    $ py -m venv jampytest_venv

This should create the following folder structure in

::

  - jampytest
      - jampytest_venv
          - Include
          - Lib
          - Scripts
          - pyvenv.cfg


Now activate the virtual environment:

.. code-block:: console
  
    $ ./jampytest_venv/Scripts/activate
    $ py -m pip install --upgrade pip

To deactivate the virtual environment, simply issue the command ``deactivate``.

Install Jam.py
====================

Installing an official release with `pip`_
-----------------------------------------

This is the recommended way to install Jam.py.

1. This step is not really rquired if you have followed all the steps from previous sections.
   For older versions you need to Install pip_ if it is not alredy there. 
   The easiest way to do so is to use the `standalone pip installer`_. If your
   distribution already has ``pip`` installed, you might need to update it using ``py -m pip install --upgrade pip`` 
   if it's outdated. (If it's outdated, you'll know because installation won't
   work.)

2. If you have terminal / command prompt open from previous section then your virtual environment is 
   already activated but if not it can be activate it like so:
   
   .. code-block:: console
   
    $ cd jampytest
    $ ./jampytest_venv/Scripts/activate
    
  Ofcourse, if you do not wish to use virtal environment, just skip to the next step.

3. If you're using Linux, Mac OS X or some other flavor of Unix, enter the
   command 
   
   .. code-block:: console
   
    $ sudo pip install jam.py 
    
   at the shell prompt. 
   
   If you're using Windows, start a command shell with administrator privileges 
   and run the command 
   
   .. code-block:: console
   
    > py -m pip install jam.py 
   
   This will install Jam.py in your virtual environment.


.. _pip: http://www.pip-installer.org/
.. _standalone pip installer: http://www.pip-installer.org/en/latest/installing.html#install-pip


Installing an official release manually
---------------------------------------

1. Download the package archive. 

2. Create a new directory and unpack the archive there. 

3. Go into the directory and run the setup command from command line

.. code-block:: console

   $ python setup.py install
    
This will install Jam.py in your Python installation's site-packages directory.

.. note::
	On some unix like systems you may need to switch to root or run: 
	sudo python setup.py install

Create your first JAM.PY project
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Now that environment is all set-up, say we want to create a project called ``jampy_project_01``. We will do this by issuing following commands:

.. code-block:: console
  
    $ cd jampytest
    $ mkdir jampy_project_01
    $ cd jampy_project_01
    $ jam-project.py

This will create following folder structure if you created a virtual environment:

::

  - jampytest
      - jampytest_venv
          - Include
          - Lib
          - Scripts
          - pyvenv.cfg
      - jampy_project_01
          - css
          - js
          - locks
          - logs
          - reports
          - static
          - admin.sqlite
          - index.html
          - langs.sqlite
          - server.py
          - wsgi.py
          
If you created the project without virtual envonment, folder structure will look as below

::

  - jampytest
      - jampy_project_01
          - css
          - js
          - locks
          - logs
          - reports
          - static
          - admin.sqlite
          - index.html
          - langs.sqlite
          - server.py
          - wsgi.py