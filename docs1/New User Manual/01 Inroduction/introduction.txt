============
Introduction
============

"JAM.py" is a play on the words "Jam pie" which in turn is what one would call Pryanik, a type of flat honey cake.

Pryanik is a favorite traditional Russian delight. The city of Tula is considered to be its birthplace,
first made in the 16th century, and 500 years later the Tula pryanik remains Russia's gastronomic pride.

What distinguishes the Tula pryanik from other types is that it has *two halves and a filling*:
jam, confiture or brewed sweet condensed milk, which is Russiaâ€™s version of dulce de leche.
The Tula pryanik is a type of imprinted pryanik, and wooden handmade imprints may include
different symbols, inscriptions and patterns.

All this has relevance to the way our product operates. It has the two halves
``App front end`` and  ``App Builder`` flled with the bootstrapy sweetness
that binds these two halves of the product to make a perfect visual delight ready for consumption.

Anyway like Shakespear said:

    "What's in a name?

    that which we call a rose

    By any other name would smell as sweet."

    -- William Shakespeare, Romeo and Juliet

So let's not dwell on the name any more and let's get to know the wonderful platform that JAM.PY really is and how it can help you build your next masterpiece.

What is JAM.PY?
===============

JAM.PY is a platform that allows you to build web applications and has the flexibility
to scale as your knowledge grows and the complexity of your application increases.
Before you start looking into more details, lets examine an example scenario that a
platform such as JAM.PY can help resolve.

Say you are an operations manager and have found a new way to increase efficiency
by means of filling up important information for fulfilling an order.
You will now need to circulate a spreadsheet to your staff who will then have to
fill in the new spreadsheet and typically a new spreadsheet will be met with a
moan, result in data discrepancy and manual errors down the line- as even though
you told a number of times "Quantity" must be entered some entries just do not have it.
Then there are multiple entries for the same customer as two different people have entered
client name as "The Client" and "The Client Ltd.". You can see the nightmare in making.

**What if you had a tool that magically changed those pesky little cells into a nice
looking form on the browser and has all nice validations for mandatory fields upfront?**

That will surely avoid the hell of data correction at the end of the month when
you have to collate the data. It will also mean that all your staff can enter data
simultaneously without waiting for other person to finish before the spreadsheet is
available for them to fill in their data. Enter JAM.PY!!!

With a little bit of forethought on how you want the data to be captured and in
what sequence, JAM.PY allows you to create a website that can be hosted on a server
and be accessible to all your team. It also creates the familiar web experience almost
everyone is aware of and does not allow the user to submit data until all the data
specified as mandatory is filled first.

Data consistency is only really a nicer side-effect of using a database.
JAM.PY just makes accessing the superpowers of a database, that are usually reserved for
the IT guys who are only available through expensive projects,
to normal business users. Now all this may sound complicated but stay with me
to see how easy it all is when you use JAM.PY.

With the initial bit of planning not only will you be able to collect your data
with more accuracy but you will also be able to create visually pleasing and interactive
dashboards as well as reports that can be as detailed or as simple a you need them to be.

How does JAM.PY do it?
======================

JAM.PY uses three core technologies under the hood:

* Python: For all server side communication between your web-app and the database you have chosen.

* Javascript: For all the pretty looking website magic.

  * JQUERY
  * Bootstrap: While currently JAM.PY uses an older version of bootstrap - Upgrade of Bootsrap to the latest version is on the roadmap.

* A relational database - This can be anything from the most basic of all sqlite database to the heavy weight Postgresql. Basically JAM.PY can speak to any of these databases:
  * SQLite
  * PostgreSQL
  * MySQL
  * Firebird
  * MSSQL
  * Oracle

The Helicopter View
===================

Just like when you first started using excel sheet you had to learn what is a cell, a worksheet or a range
and how to enter formula to get your data to start making sense, there is a small amount of understanding
required to get started with JAM.PY. While we will go through all these topics in detail under their
dedicated chapters, it will still be beneficial to start getting acquainted with the key players
- A helicopter view, if you will.

The JAM.PY platform at a vey high level comprises of two front end tools:

* Builder
* Application

As the name suggests "Builder" is what you need to build the "Application".

The nuts and bolts of your application or any application in general comprise of following types of data:

* Catalogs (a.k.a. Data
* Repository) - This is the data that does not change very often. eg: Customer Names Albums, Product Description etc.
* Journals (a.k.a Data Captures) - This is the data that is captured fairly regularly because of the ongoing operations.
* Details (a.k.a Subforms) - This is the data that is linked to another master data and for each of the master data this can have multiple entries. This kind of relationship between the data is also known as "one to many" in technical speak. A good way to understand it is a mother can have many children but a child can only have one biological mother.
* Reports (a.k.a Dashboards)- This is the data that mostly causes all t hoopla in the first place. Someone wants to know all the sales figures and someone else wants to know how many incidents were completed within the SLA.All that and more is accomplished by means of data that is created by "Reports". While the last item in chain of events it is the one asked first and should always be on your mind while you create and categorise rest o your data into previous categories.

While these are the main characters, their is supporting cast too and the supporting type of data involves:

* System - This is the data that tells who can see all the other data. So your spreadsheet will mainly have above data but you ay have one sheet only to list down who are allowed to see that spreadsheet. That information will basically be classified as System Data.
* Analytics - Now this is a byproduct of collecting all above data in order to create reports. For instance: A Report could be about which users have entered the data by a deadline - This will be possible by accessing information from System Data and combining with information in Journal Data and any of its underlying Details data.

So in order to build your "Application", the JAM.PY platform provides "Builder"
which in turn allows you to create your data for each of the above types and
then **automagically** creates the web app.

-----------------
