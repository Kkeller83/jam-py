======================
Tree Element - Project
======================

This tree element is the top node in the ``Tree`` and does not have anything in
the second pane. It does however have following actions in the third pane:

1. Parameters
#. Database
#. Export
#. Import
#. Find
#. Print

While last two actions are fairly obvious, lets cover the rest of these in detail below.

Parameters
----------

After clicking on the **Parameters** button the Parameters Dialog will appear.
It has two tabs **General** and **Interface**.


.. note::
	Normally, if you are just starting with this platform,
	you would only want to make changes here to check or uncheck
	"Safe Mode" or "Production".

	Rest of the fields here will make more sense for advanced usage.


General tab
^^^^^^^^^^^^^^

.. image:: /admin/_images/parameters.png
	:align: center
	:alt: Project parameters dialog

On the General tab, you can specify general parameters of the project:

* **Production** - If this checkbox is checked, it will act like a lock to your database structure
and you will not be able to change the project database in Application Builder.

* **Safe mode** - If safe mode is enabled, authentication is needed for user to
  work on the system (See
  :doc:`Users </admin/users>`
  and
  :doc:`Roles </admin/roles>`
  ).

* **Debugging** - if this checkbox is checked, the Werkzeug libarary debugger will
  be invoked when an error on the server occurs.

* **Language** - use it to open Language Dialog. See
  :doc:`Language support </admin/language_support>`

* **Persistent connection** - if this checkbox is checked the application creates
  a connection pool otherwise a connection is created before executing the sql query.

* **Connection pool size** - the size of the server database connection pool.

* **Compressed JS, CSS files** - If this button is checked the server returns
  compressed *js* and *css* files when *index.html* page is loaded.

* **All JS modules in a single file** - If this checkbox is unchecked, the
  application will generate a javascript file in the project *js* folder for
  every item in the :doc:`task tree </programming/task_tree>`, that has code in
  its Client module, with the name *item_name.js*, where *item_name* is the name
  of an item.
  Otherwise, the application will generate a javascript file with the name
  *task_name.js*, where *task_name* is the name of the project
  :doc:`task </admin/task>` (for example *demo.js*), that will contain javascript
  code of all items, except items, whose **External js module** checkbox in the
  :doc:`Item Editor Dialog </admin/items/item_editor_dialog>`
  is checked (separate files will be created for them).

* **Dynamic JS modules loading** - If this checkbox is unchecked and the
  application generates more than one javascript file, only file named
  *task_name.js* will be loaded when application is run. All other files must be
  loaded dynamically. See :doc:`Working with modules </programming/modules>`.

* **History item** - to specify item, that will store change history, see
  :doc:`Saving audit trail/change history made by users </admin/saving_history>`

* **Session timeout (seconds)** - number of second of inactivity that is allowed
  before the session expires.

* **Session ignore change ip** - if false, the session is only valid when
  it is accessed from the same ip address that created the session.

* **Max content length (MB)** - use it to limit the total content length of the
  request to the server, in megabytes.

* **Import delay (seconds)** - if set the application will wait the number of
  seconds set in the parameter before changing the project dataset while
  :doc:`importing project metadata <metadata_file>`
  ,
  otherwise it waits for 5 minutes or until all previous request
  to the serverin the current process will be processed.

* **Delete reports after (hours)** - if a value is specified the generated
  reports that are located in the static/reports folder will be deleted after
  specified number of hours have passed.

* **Version** â€” specify the version of the project here.

.. note::
   When **Connection pool size** or **Persistent connection** parameters are
   changed, the server applicaton must be restarted for changes to take effect.


Interface tab
^^^^^^^^^^^^^^^^^^^^^^^

.. image:: /admin/_images/parameters_interface.png
	:align: center
	:alt: parameters_interface.png

On the Interface tab, you can specify interface parameters of the project:

* **Theme** - use this parameter to select the theme of the project from one of
  predefined themes

* **Small font** - if this button is checked, the default font size will be 12px,
  otherwise it is 14px

* **Full width** - if this button is checked the project will fill the page width,
  without left and right margins

* **Display forms in tabs** - if this button is checked, the forms will be opened
  tabs



Database
----------------


.. image:: /admin/_images/database.png
	:align: center
	:alt: Database dialog

In this dialog project database parameters are displayed. When they have been
changed and OK button is clicked, the Application builder will check connection
to the database and if it failed to connect an error will be displayed.

.. note::
   When any **Database** parameter is changed, except **DB manual update**,
   the server application must be restarted for changes to take effect.

If **DB manual update** checkbox is unchecked (default), then when changes to an
item, that have an associated database table, are saved, this database table is
automatically modified. For example, if we add a new field to some item in the
:doc:`Item Editor Dialog </admin/items/item_editor_dialog>`
, the new field will be added to the associated database table. If this checkbox
is checked, no modifications to the database tables are made.

.. note::
    Please be very careful when using this option.


Examples of database setups
================================


SQLite
^^^^^^^

.. image:: /admin/_images/SQLite_setup.png
	:align: center
	:alt: SQLite setup

.. note::

    For **SQLite** database, when an item field is deleted or renamed, or foreign
    key is created,
    :doc:`Application builder </admin/index>`,
    creates a new table and copies records from the old one into it.

    For **SQLite** database, Jam.py doesn't support importing of metadata into an
    existing project (project with tables in the database).
    You can only import metadata into a new project.

PostgreSQL
^^^^^^^^^^^^^^

.. image:: /admin/_images/postgres_setup.png
	:align: center
	:alt: PostgreSQL setup

MySql
^^^^^^^^^^^^^^

.. image:: /admin/_images/MySql_setup.png
	:align: center
	:alt: MySql setup

FireBird
^^^^^^^^^^^^^^

.. image:: /admin/_images/firebird_setup.png
	:align: center
	:alt: FireBird setup

MSSQL
^^^^^^^^^^^^^^

.. image:: /admin/_images/mssql_setup.png
	:align: center
	:alt: MSSQL setup

Oracle
^^^^^^^^^^^^^^

.. image:: /admin/_images/oracle_setup.png
	:align: center
	:alt: Oracle setup


Export
------

Press this button to export project
:doc:`metadata <metadata_file>`
to zip file.


Import
------

Use this button to import project
:doc:`metadata <metadata_file>`
from zip file.


Find
----

Press this button to search for the character string in all modules of
the project.

.. image:: /admin/_images/find.png
	:align: center
	:alt: Find in project dialog


Print
-----

Press this button to print all modules of the project.
